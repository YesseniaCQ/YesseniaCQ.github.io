<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Centos 7 非root用户安装rpm格式软件</title>
    <url>/2023/08/06/Centos-7-%E9%9D%9Eroot%E7%94%A8%E6%88%B7%E5%AE%89%E8%A3%85rpm%E6%A0%BC%E5%BC%8F%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<p>以安装fontconfig为例</p>
<h3 id="查找包名"><a href="#查找包名" class="headerlink" title="查找包名"></a>查找包名</h3><p>yum search fontconfig</p>
<p>我要使用的包名叫：fontconfig.x86_64</p>
<p><img src="https://pic2.zhimg.com/80/v2-d8b5a3d9ae8feb7cc443e1bf819bdce1_720w.webp" alt="img" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="下载包"><a href="#下载包" class="headerlink" title="下载包"></a>下载包</h3><p>包的保存位置在：~&#x2F;rpm</p>
<p>mkdir -p ~&#x2F;rpm</p>
<p>使用yumdownloader下载<br>yumdownloader –destdir ~&#x2F;rpm –resolve fontconfig.x86_64</p>
<p>–destdir： 保存位置。</p>
<p>–resolve：表示下载依赖</p>
<p>下载完成后，~&#x2F;rpm 目录的内容为：</p>
<p><img src="https://pic1.zhimg.com/80/v2-0b3b5347475936a7c96b2dd66cea12c8_720w.webp" alt="img" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><p>安装位置：~&#x2F;centos</p>
<p>安装语法：rpm2cpio ~&#x2F;rpm&#x2F;xxxxxx.rpm | cpio -id</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">mkdir ~/centos</span><br><span class="line">rpm2cpio ~/rpm/dejavu-fonts-common-2.33-6.el7.noarch.rpm | cpio -id</span><br><span class="line">rpm2cpio ~/rpm/dejavu-sans-fonts-2.33-6.el7.noarch.rpm | cpio -id</span><br><span class="line">rpm2cpio ~/rpm/fontconfig-2.13.0-4.3.el7.x86_64.rpm | cpio -id</span><br><span class="line">rpm2cpio ~/rpm/fontpackages-filesystem-1.44-8.el7.noarch.rpm | cpio -id</span><br></pre></td></tr></table></figure>

<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>在~&#x2F;.bashrc中增加以下内容</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">export PATH=&quot;$HOME/centos/usr/sbin:$HOME/centos/usr/bin:$HOME/centos/bin:$PATH&quot;</span><br><span class="line">export MANPATH=&quot;$HOME/centos/usr/share/man:$MANPATH&quot;</span><br><span class="line">L=&#x27;/lib:/lib64:/usr/lib:/usr/lib64&#x27;</span><br><span class="line">export LD_LIBRARY_PATH=&quot;$HOME/centos/usr/lib:$HOME/centos/usr/lib64:$L&quot;</span><br></pre></td></tr></table></figure>

<p>再执行：source ~&#x2F;.bashrc</p>
]]></content>
  </entry>
  <entry>
    <title>MP4切片m3u8+github存储视频，以及一点hexo视频插入</title>
    <url>/2023/08/11/MP4%E5%88%87%E7%89%87m3u8-github%E5%AD%98%E5%82%A8%E8%A7%86%E9%A2%91%EF%BC%8C%E4%BB%A5%E5%8F%8A%E4%B8%80%E7%82%B9hexo%E8%A7%86%E9%A2%91%E6%8F%92%E5%85%A5/</url>
    <content><![CDATA[<p>由于我想给博客的背景应用视频，但出现了难题：需要视频床（且视频太大不行）。于是我跟着教程使用ffmeg将MP4切成m3u8，并传上github使用cdn加速。这时，新的难题出现，如何导入网页，特别是hexo博客。于是我下载了模块hexo-tag-videojs（主要目的是导入必要的css和js，另外这个插件在md中插入m3u8也极为方便，干脆下了插件而不是自己导入js）</p>
<h2 id="使用ffmeg切片m3u8"><a href="#使用ffmeg切片m3u8" class="headerlink" title="使用ffmeg切片m3u8"></a>使用ffmeg切片m3u8</h2><ol>
<li><p>（windows 11）在cmd中下载ffmeg</p>
 <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">winget isntall ffmeg</span><br></pre></td></tr></table></figure>
</li>
<li><p>继续在cmd中操作（记得转到目标视频所在文件夹下）</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ffmpeg <span class="literal">-i</span> <span class="string">&#x27;视频文件名称.mp4&#x27;</span> <span class="literal">-c</span>:v h264 <span class="literal">-flags</span> +cgop <span class="literal">-g</span> <span class="number">30</span> <span class="literal">-hls_time</span> <span class="number">5</span> <span class="literal">-hls_list_size</span> <span class="number">0</span> <span class="literal">-hls_segment_filename</span> 文件夹/名称%<span class="number">3</span>d.ts <span class="string">&#x27;文件夹/名称.m3u8&#x27;</span> </span><br><span class="line"><span class="comment">#文件夹可不加</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意这里的视频要h.264编码，然后-hls_time 5意为5秒作为一个切片，当视频文件比较小的时候可以设置10s或20s等作为一个切片，注意切片的大小不能超过20m，要不然没法使用jsd加速。</p>
</blockquote>
</li>
<li><p>接下来将文件夹推送到github，使用cdn加速，这个链接就可以直接用了。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/用户名/仓库名/文件夹名/名称.m3u8</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="在网页中使用m3u8"><a href="#在网页中使用m3u8" class="headerlink" title="在网页中使用m3u8"></a>在网页中使用m3u8</h2><ol>
<li><p>引用相关css和js</p>
<p>两种情况</p>
<ol>
<li><p><strong>hexo框架</strong>，比如博客，直接安装模块hexo-tag-videojs，我是博客所以选这个</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-tag-videojs --save</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>独立网页</strong>需要引用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://unpkg.com/video.js/dist/video-js.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/video.js/dist/video.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/videojs-contrib-hls/dist/videojs-contrib-hls.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>插入视频</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;myvideo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;video-js vjs-default-skin&quot;</span> <span class="attr">controls</span> <span class="attr">preload</span>=<span class="string">&quot;auto&quot;</span> <span class="attr">width</span>=<span class="string">&quot;640&quot;</span> <span class="attr">height</span>=<span class="string">&quot;268&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">data-setup</span>=<span class="string">&#x27;&#123;&#125;&#x27;</span>&gt;</span> #data-setup里可以调控大小，自动等，具体看说明文档</span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;http://d2zihajmogu5jn.cloudfront.net/bipbop-advanced/bipbop_16x9_variant.m3u8&quot;</span> <span class="attr">type</span>=<span class="string">&quot;application/x-mpegURL&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line">#这个是我用来做背景的ejs代码，视频也可以直接style定义样式，更推荐</span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;welcomeVideo&quot;</span> <span class="attr">loop</span> <span class="attr">muted</span> <span class="attr">playsinline</span> <span class="attr">webkit-playinginline</span> <span class="attr">data-scroll</span> <span class="attr">data-scroll-direction</span>=<span class="string">&quot;vertical&quot;</span> <span class="attr">data-setup</span>=<span class="string">&#x27;&#123;&#125;&#x27;</span> <span class="attr">preload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">style</span>=<span class="string">&#x27;width: 100%;height: auto&#x27;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;&lt;%= url_for(bgurl) %&gt;&quot;</span> <span class="attr">type</span>=<span class="string">&#x27;application/x-mpegURL&#x27;</span>&gt;</span></span><br><span class="line">            Your browser does not support HTML5 video.</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以插入多个source</p>
</blockquote>
<p>后面应该需要跟个js，虽然官方文档说video或data-setup里设置了就不用，但我尝试的结果是不可缺少</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> myVideo = <span class="title function_">videojs</span>(<span class="string">&#x27;welcomeVideo&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">loop</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">controls</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">preload</span>: <span class="string">&#x27;auto&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">autoplay</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>最后附上<a href="https://gitcode.gitcode.host/docs-cn/video.js-docs-cn/docs/guides/setup.html">官方文档</a></p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Dictys:动态基因调控网络剖析单细胞多组学的发育连续体</title>
    <url>/2023/08/08/Dictys-%E5%8A%A8%E6%80%81%E5%9F%BA%E5%9B%A0%E8%B0%83%E6%8E%A7%E7%BD%91%E7%BB%9C%E5%89%96%E6%9E%90%E5%8D%95%E7%BB%86%E8%83%9E%E5%A4%9A%E7%BB%84%E5%AD%A6%E7%9A%84%E5%8F%91%E8%82%B2%E8%BF%9E%E7%BB%AD%E4%BD%93/</url>
    <content><![CDATA[<h1 id="Dictys：动态基因调控网络剖析单细胞多组学的发育连续体"><a href="#Dictys：动态基因调控网络剖析单细胞多组学的发育连续体" class="headerlink" title="Dictys：动态基因调控网络剖析单细胞多组学的发育连续体"></a>Dictys：动态基因调控网络剖析单细胞多组学的发育连续体</h1><h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><p><strong>Dictys</strong>，整合分析单细胞转录组（scRNA-seq）与染色质开放性（bulk or scATAC-seq）数据，结合转录因子结合足迹（TF footprints）与转录因子表达&#x2F;调节活性分析，在人造血系统等实现了发育连续过程基因调控网络（Gene regulatory networks (GRNs)）动态分析</p>
<p><strong>Dictys</strong>，整合分析单细胞转录组（scRNA-seq）与染色质开放性（bulk or scATAC-seq）数据，结合转录因子结合足迹（TF footprints）与转录因子表达&#x2F;调节活性分析，在人造血系统等实现了发育连续过程基因调控网络（Gene regulatory networks (GRNs)）动态分析</p>
]]></content>
      <tags>
        <tag>文献学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Dictys教程使用心得</title>
    <url>/2023/08/25/Dictys%E6%95%99%E7%A8%8B%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/</url>
    <content><![CDATA[<ul>
<li>使用 dictys_helper network_inference.sh，会自动对每个细胞子集进行分析（注意线程数）：<ul>
<li>对 RNA 数据进行质量控制和筛选，生成 expression.tsv.gz 文件。</li>
<li>对 ATAC 数据进行质量控制和筛选，生成 names_atac.txt 文件。</li>
<li>使用 macs2 程序对 ATAC 数据进行峰值检测，生成 reads.bam, reads.bai, peaks.bed 文件。</li>
<li>使用 wellington 程序对 ATAC 数据进行足迹检测，生成 footprints.bed 文件。</li>
<li>使用 dictys 模块对 RNA 和 ATAC 数据进行联合分析，生成 network.tsv.gz, network.h5, network.png, network.pdf, network.dot, network.gml, network.sif, network.tsv, network.html, network.json, network.cytoscape.json, network.graphml 文件。这些文件包含了 GRN 的结构和属性信息。</li>
</ul>
</li>
</ul>
<p>这张点图是用Dictys软件生成的，它是一个用于分析多组学数据的工具。它显示了不同细胞亚群之间的基因表达（以CPM为单位）和其特异性（以CPM的比例为单位）。每个点代表一个基因，点的大小和颜色反映了该基因在特定细胞亚群中的表达水平和特异性。这个图可以帮助发现每个细胞亚群的表达标记基因，这些基因在该细胞亚群中有较高的表达和特异性。这些标记基因可以反映细胞亚群的功能和特征，也可以用于进一步的分析和研究。</p>
<p>这张点图的主要信息有：</p>
<ul>
<li><strong>Treg细胞亚群</strong>：这个细胞亚群主要表达了<strong>FOXP3</strong>，<strong>CTLA4</strong>，<strong>IKZF1</strong>等基因，这些基因与调节性T细胞（Treg）的功能有关。Treg细胞可以抑制其他免疫细胞的活动，从而维持免疫系统的平衡。</li>
<li><strong>MP细胞亚群</strong>：这个细胞亚群主要表达了<strong>MAF</strong>，<strong>MAFB</strong>，<strong>EGR1</strong>，<strong>PPARA</strong>等基因，这些基因与巨噬细胞（MP）的功能有关。巨噬细胞是一种能够吞噬和清除病原体和死亡细胞的免疫细胞。</li>
<li><strong>NK.CD56h细胞亚群</strong>：这个细胞亚群主要表达了<strong>NFYC</strong>，<strong>ASCL2</strong>，<strong>HSF1</strong>等基因，这些基因与自然杀伤细胞（NK）的功能有关。NK细胞是一种能够识别和杀死癌细胞和病毒感染的细胞的免疫细胞。</li>
<li><strong>DC细胞亚群</strong>：这个细胞亚群主要表达了<strong>CUX2</strong>，<strong>ERG</strong>，<strong>MEIS1</strong>，<strong>PBX1</strong>等基因，这些基因与树突状细胞（DC）的功能有关。DC细胞是一种能够捕获和呈递抗原给T细胞的免疫细胞。</li>
<li><strong>Plasma细胞亚群</strong>：这个细胞亚群没有明显的表达标记基因。</li>
<li><strong>Th17细胞亚群</strong>：这个细胞亚群主要表达了<strong>SMAD3</strong>，<strong>NFIA</strong>，<strong>KLF9</strong>等基因，这些基因与Th17型辅助T细胞（Th17）的功能有关。Th17细胞是一种能够分泌白介素17（IL-17）等炎症因子的免疫细胞。</li>
<li><strong>Mono.CD14.1和Mono.CD14.2细胞亚群</strong>：这两个细胞亚群都属于单核细胞（Mono），但是有不同的表达标记基因。Mono.CD14.1主要表达了<strong>CEBPA</strong>, <strong>ETV7</strong>, <strong>CEBPG</strong>, <strong>NFIL3</strong>, <strong>BATF</strong>, <strong>CEBPB</strong>, 等基因；Mono.CD14.2主要表达了 <strong>E2F6</strong>, <strong>HES1</strong>, <strong>FOXJ2</strong>, <strong>DDIT3</strong>, <strong>MITF</strong>, <strong>IRF4</strong>, 等基因。单核细胞是一种能够分化为巨噬细胞或树突状细胞的免疫细胞。</li>
<li><strong>Tnaive细胞亚群</strong>：这个细胞亚群没有明显的表达标记基因。</li>
<li><strong>Tmem.CD4细胞亚群</strong>：这个细胞亚群没有明显的表达标记基因。</li>
<li><strong>NK.CD56l细胞亚群</strong>：这个细胞亚群主要表达了<strong>GFI1</strong>，<strong>BCL6</strong>等基因，这些基因与自然杀伤细胞（NK）的功能有关。NK细胞是一种能够识别和杀死癌细胞和病毒感染的细胞的免疫细胞。</li>
<li><strong>Tmem.CD8细胞亚群</strong>：这个细胞亚群主要表达了<strong>HINFP</strong>，<strong>TFAP4</strong>，<strong>MTF1</strong>，<strong>ETV3</strong>，<strong>SP1</strong>，<strong>MYC</strong>，<strong>TGIF1</strong>等基因，这些基因与记忆性CD8+ T细胞（Tmem.CD8）的功能有关。记忆性CD8+ T细胞是一种能够在再次遇到同样的抗原时快速激活和扩增的免疫细胞。</li>
<li><strong>B细胞亚群</strong>：这个细胞亚群主要表达了<strong>OVOL2</strong>, <strong>ZFP82</strong>, <strong>BRCA1</strong>, <strong>HSF2</strong>, <strong>SOX5</strong>, <strong>PLAG1</strong>, <strong>MYNN</strong>, <strong>PRDM1</strong>, <strong>PAX5</strong>, <strong>TFDP1</strong>, 等基因，这些基因与B淋巴细胞（B）的功能有关。B淋巴细胞是一种能够分泌抗体的免疫细胞。</li>
<li><strong>Mono.CD16细胞亚群</strong>：这个细胞亚群主要表达了<strong>ATF4</strong>, <strong>FOSL2</strong>, <strong>ZBTB4</strong>, <strong>ZNF41</strong>, <strong>MAFG</strong>, <strong>NR2C1</strong>, <strong>NFYA</strong>, <strong>USF2</strong>, <strong>DBP</strong>, 等基因，这些基因与单核细胞（Mono）的功能有关。单核细胞是一种能够分化为巨噬细胞或树突状细胞的免疫细胞。</li>
</ul>
<p>如果您想了解更多关于Dictys软件和点图的信息，可以参考以下链接：</p>
<ul>
<li>Dictys官网</li>
<li>点图介绍</li>
</ul>
<p>请注意，这些链接可能包含英文内容。: <a href="https://dictys.org/">https://dictys.org/</a> : <a href="https://www.nature.com/articles/nmeth.1615">https://www.nature.com/articles/nmeth.1615</a></p>
]]></content>
  </entry>
  <entry>
    <title>Scanpy数据结构：AnnData</title>
    <url>/2023/08/06/Scanpy%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9AAnnData/</url>
    <content><![CDATA[<p>AnnData是python中存储单细胞数据的一种格式</p>
<h5 id="1-AnnData数据结构："><a href="#1-AnnData数据结构：" class="headerlink" title="1. AnnData数据结构："></a>1. AnnData数据结构：</h5><blockquote>
<p>主要包含四个slots：<br><code>X</code> contains the expression matrix.<br><code>obsm</code> contains the embeddings data.<br><code>obs</code> contains the cell metadata.<br><code>var</code> contains the gene metadata.</p>
</blockquote>
<p><img src="https://upload-images.jianshu.io/upload_images/15771939-738878fe0ad17428.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">adata</span><br><span class="line"># AnnData object <span class="keyword">with</span> n_obs × n_vars = <span class="number">2638</span> × <span class="number">1838</span></span><br><span class="line">#     obs: <span class="string">&#x27;n_genes&#x27;</span>, <span class="string">&#x27;n_genes_by_counts&#x27;</span>, <span class="string">&#x27;total_counts&#x27;</span>, <span class="string">&#x27;total_counts_mt&#x27;</span>, <span class="string">&#x27;pct_counts_mt&#x27;</span>, <span class="string">&#x27;leiden&#x27;</span>, <span class="string">&#x27;louvain&#x27;</span>, <span class="string">&#x27;louvain_anno&#x27;</span></span><br><span class="line">#     <span class="keyword">var</span>: <span class="string">&#x27;gene_ids&#x27;</span>, <span class="string">&#x27;n_cells&#x27;</span>, <span class="string">&#x27;mt&#x27;</span>, <span class="string">&#x27;n_cells_by_counts&#x27;</span>, <span class="string">&#x27;mean_counts&#x27;</span>, <span class="string">&#x27;pct_dropout_by_counts&#x27;</span>, <span class="string">&#x27;total_counts&#x27;</span>, <span class="string">&#x27;highly_variable&#x27;</span>, <span class="string">&#x27;means&#x27;</span>, <span class="string">&#x27;dispersions&#x27;</span>, <span class="string">&#x27;dispersions_norm&#x27;</span>, <span class="string">&#x27;mean&#x27;</span>, <span class="string">&#x27;std&#x27;</span></span><br><span class="line">#     uns: <span class="string">&#x27;hvg&#x27;</span>, <span class="string">&#x27;leiden&#x27;</span>, <span class="string">&#x27;leiden_colors&#x27;</span>, <span class="string">&#x27;neighbors&#x27;</span>, <span class="string">&#x27;pca&#x27;</span>, <span class="string">&#x27;rank_genes_groups&#x27;</span>, <span class="string">&#x27;umap&#x27;</span>, <span class="string">&#x27;draw_graph&#x27;</span>, <span class="string">&#x27;diffmap_evals&#x27;</span>, <span class="string">&#x27;louvain&#x27;</span>, <span class="string">&#x27;paga&#x27;</span>, <span class="string">&#x27;louvain_sizes&#x27;</span>, <span class="string">&#x27;louvain_colors&#x27;</span>, <span class="string">&#x27;leiden_sizes&#x27;</span></span><br><span class="line">#     obsm: <span class="string">&#x27;X_pca&#x27;</span>, <span class="string">&#x27;X_umap&#x27;</span>, <span class="string">&#x27;X_draw_graph_fa&#x27;</span>, <span class="string">&#x27;X_diffmap&#x27;</span></span><br><span class="line">#     varm: <span class="string">&#x27;PCs&#x27;</span></span><br><span class="line">#     obsp: <span class="string">&#x27;connectivities&#x27;</span>, <span class="string">&#x27;distances&#x27;</span></span><br><span class="line"></span><br><span class="line"># 查看帮助文档和数据类型</span><br><span class="line">help(adata)</span><br><span class="line">type(adata.<span class="keyword">var</span>[<span class="string">&quot;gene_ids&quot;</span>])</span><br><span class="line"># pandas.core.series.Series</span><br></pre></td></tr></table></figure>

<ul>
<li><code>.X</code>这个部分储存的是矩阵信息，数据结构是<code>numpy array</code>，和seurat对象一样，基因variable *细胞observation的稀疏矩阵。<br>但是.X的结构ndarray，是一个数组，是没有行名列名消息的。行名和列名消息存储在.obs和.var里。</li>
</ul>
<p>调取矩阵信息：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">import scvelo as scv</span><br><span class="line">scv<span class="selector-class">.DataFrame</span>(adata<span class="selector-class">.X</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/15771939-162cb9f01263eff9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li><code>.obs</code>存储的是细胞的信息，数据结构是<code>pandas dataframe</code>。<br>相当于Seurat对象中的metadata</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">adata<span class="selector-class">.obs</span></span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/15771939-08df5d5f7222e975.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>一维针对观测的注释，是数据框类型</p>
<p>访问其中的一个属性，就通过普通的dataframe来访问：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">adata<span class="selector-class">.obs</span><span class="selector-attr">[<span class="string">&#x27;n_genes&#x27;</span>]</span></span><br><span class="line">AAACATACAACCAC-<span class="number">1</span>     <span class="number">781</span></span><br><span class="line">AAACATTGAGCTAC-<span class="number">1</span>    <span class="number">1352</span></span><br><span class="line">AAACATTGATCAGC-<span class="number">1</span>    <span class="number">1131</span></span><br><span class="line">AAACCGTGCTTCCG-<span class="number">1</span>     <span class="number">960</span></span><br><span class="line">AAACCGTGTATGCG-<span class="number">1</span>     <span class="number">522</span></span><br><span class="line">                    ... </span><br><span class="line">TTTCGAACTCTCAT-<span class="number">1</span>    <span class="number">1155</span></span><br><span class="line">TTTCTACTGAGGCA-<span class="number">1</span>    <span class="number">1227</span></span><br><span class="line">TTTCTACTTCCTCG-<span class="number">1</span>     <span class="number">622</span></span><br><span class="line">TTTGCATGAGAGGC-<span class="number">1</span>     <span class="number">454</span></span><br><span class="line">TTTGCATGCCTCAC-<span class="number">1</span>     <span class="number">724</span></span><br><span class="line">Name: n_genes, Length: <span class="number">2638</span>, dtype: int64</span><br></pre></td></tr></table></figure>

<p>查看有多少cluster&#x2F;细胞亚群…</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">adata<span class="selector-class">.obs</span><span class="selector-attr">[<span class="string">&#x27;clusters&#x27;</span>]</span><span class="selector-class">.unique</span>()</span><br></pre></td></tr></table></figure>

<ul>
<li><code>.var</code>存储的是基因的信息，数据结构是<code>pandas dataframe</code>。</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">adata.<span class="keyword">var</span></span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/15771939-c35a34916e158070.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>一维的针对特征的注释，返回数据框类型。</p>
<p>访问其中一个属性的方法和.obs一样</p>
<ul>
<li><code>.uns</code>存储的是后续添加的非结构信息，数据结构是<code>dict</code>，有序字典。</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">adata.uns[<span class="string">&#x27;leiden&#x27;</span>]</span><br><span class="line"># &#123;<span class="string">&#x27;params&#x27;</span>: &#123;<span class="string">&#x27;resolution&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;random_state&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;n_iterations&#x27;</span>: -<span class="number">1</span>&#125;&#125;</span><br><span class="line">adata.uns[<span class="string">&#x27;leiden_colors&#x27;</span>]</span><br><span class="line"># array([<span class="string">&#x27;#1f77b4&#x27;</span>, <span class="string">&#x27;#ff7f0e&#x27;</span>, <span class="string">&#x27;#279e68&#x27;</span>, <span class="string">&#x27;#d62728&#x27;</span>, <span class="string">&#x27;#aa40fc&#x27;</span>, <span class="string">&#x27;#8c564b&#x27;</span>, <span class="string">&#x27;#e377c2&#x27;</span>, <span class="string">&#x27;#b5bd61&#x27;</span>], dtype=<span class="keyword">object</span>)</span><br></pre></td></tr></table></figure>

<p>这个uns的部分不是针对行&#x2F;列的，而是针对行和列标注的参数的（暂时这么理解），在上述中pbmc的obs中有louvain观测，那么在uns中就是运行louvain算法的参数。是以哈希形式存储的。</p>
<ul>
<li><code>obsm</code><br>对观测的<strong>多维</strong>的注释，m指的就是multi-dim多个维度。它是2-多维的ndarray，长度为n_obs。（obs是一个维度可以都放在一个数据框下）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adata.obsm</span><br><span class="line"><span class="comment"># AxisArrays with keys: X_pca, X_umap, X_draw_graph_fa</span></span><br></pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(adata.obsm[<span class="string">&#x27;X_pca&#x27;</span>].shape,adata.obsm[<span class="string">&#x27;X_umap&#x27;</span>].shape)</span><br><span class="line">adata.obsm[<span class="string">&#x27;X_pca&#x27;</span>]</span><br><span class="line"><span class="comment"># (2638, 50) (2638, 2)</span></span><br><span class="line"><span class="comment"># array([[-5.5562196 , -0.257729  ,  0.18678935, ..., -0.33962035,</span></span><br><span class="line"><span class="comment">#          1.482267  ,  1.8977386 ],</span></span><br><span class="line"><span class="comment">#        [-7.209527  , -7.4819927 , -0.1626957 , ..., -1.9776347 ,</span></span><br><span class="line"><span class="comment">#         -1.5584233 , -1.4961302 ],</span></span><br><span class="line"><span class="comment">#        [-2.694437  ,  1.5836601 ,  0.6631187 , ...,  0.543645  ,</span></span><br><span class="line"><span class="comment">#         -0.54527736, -4.3395023 ],</span></span><br><span class="line"><span class="comment">#        ...,</span></span><br><span class="line"><span class="comment">#        [-0.78539336, -6.718588  , -1.5988318 , ..., -0.5611978 ,</span></span><br><span class="line"><span class="comment">#         -0.10546814,  0.58385324],</span></span><br><span class="line"><span class="comment">#        [ 0.2812712 , -5.921852  , -1.1628692 , ..., -1.3820586 ,</span></span><br><span class="line"><span class="comment">#          3.5802112 ,  1.2988565 ],</span></span><br><span class="line"><span class="comment">#        [-0.09076688, -0.66350466, -0.13485757, ...,  0.37319255,</span></span><br><span class="line"><span class="comment">#          0.75012326, -0.6659836 ]], dtype=float32)</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>varm</code><br>对特征的多维的注释，与obsm相对。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adata.varm</span><br><span class="line"><span class="comment"># AxisArrays with keys: PCs</span></span><br><span class="line"><span class="built_in">print</span>(adata.varm[<span class="string">&#x27;PCs&#x27;</span>].shape)</span><br><span class="line">adata.varm[<span class="string">&#x27;PCs&#x27;</span>]</span><br><span class="line"><span class="comment"># (1838, 50)</span></span><br><span class="line"><span class="comment"># array([[-2.6014808565e-02,  3.2541397959e-03,  1.8978352891e-03, ...,</span></span><br><span class="line"><span class="comment">#         -5.1610143855e-03,  1.4520395547e-02, -6.6632591188e-04],</span></span><br><span class="line"><span class="comment">#       [-8.2782376558e-03,  9.0831620619e-03, -7.8140682308e-04, ...,</span></span><br><span class="line"><span class="comment">#         3.0852310359e-02, -8.9336717501e-03, -2.8796317056e-03],</span></span><br><span class="line"><span class="comment">#       [-3.3151865937e-03,  3.2096833456e-03,  2.7985233464e-04, ...,</span></span><br><span class="line"><span class="comment">#         1.0144758970e-02, -5.5128755048e-04,  1.5089971712e-03],</span></span><br><span class="line"><span class="comment">#       ...,</span></span><br><span class="line"><span class="comment">#       [ 8.3417436108e-03, -1.2465091422e-03, -4.1219405830e-03, ...,</span></span><br><span class="line"><span class="comment">#        -1.0164264590e-02,  9.2523321509e-03,  2.7965774760e-02],</span></span><br><span class="line"><span class="comment">#       [-1.6406573355e-02,  4.4101417065e-02, -2.1357089281e-05, ...,</span></span><br><span class="line"><span class="comment">#         9.9819628522e-03, -4.5361258090e-03, -1.3653293252e-02],</span></span><br><span class="line"><span class="comment">#       [-1.5188260004e-02,  4.0008693933e-02,  5.4121930152e-03, ...,</span></span><br><span class="line"><span class="comment">#        -3.6789905280e-03,  2.1117802709e-02,  3.5965379328e-02]])</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>obsp</code><br>针对观测的配对的注释，前两维都是n_obs。比如点与点之间的距离和连通性。</li>
</ul>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">adata.<span class="property">obsp</span></span><br><span class="line"># <span class="title class_">PairwiseArrays</span> <span class="keyword">with</span> <span class="attr">keys</span>: connectivities, distances</span><br><span class="line">adata.<span class="property">obsp</span>[<span class="string">&#x27;connectivities&#x27;</span>]</span><br><span class="line"># &lt;2638x2638 sparse matrix <span class="keyword">of</span> <span class="keyword">type</span> <span class="string">&#x27;&lt;class &#x27;</span>numpy.<span class="property">float32</span><span class="string">&#x27;&gt;&#x27;</span></span><br><span class="line">#   <span class="keyword">with</span> <span class="number">41952</span> stored elements <span class="keyword">in</span> <span class="title class_">Compressed</span> <span class="title class_">Sparse</span> <span class="title class_">Row</span> format&gt;</span><br><span class="line">adata.<span class="property">obsp</span>[<span class="string">&#x27;distances&#x27;</span>]</span><br><span class="line"># &lt;2638x2638 sparse matrix <span class="keyword">of</span> <span class="keyword">type</span> <span class="string">&#x27;&lt;class &#x27;</span>numpy.<span class="property">float64</span><span class="string">&#x27;&gt;&#x27;</span></span><br><span class="line">#   <span class="keyword">with</span> <span class="number">23742</span> stored elements <span class="keyword">in</span> <span class="title class_">Compressed</span> <span class="title class_">Sparse</span> <span class="title class_">Row</span> format&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>layers</code><br>在做速率分析的时候，还可以看到adata中有layers这一部分的信息。</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">adata = scv.datasets.pancreas()</span><br><span class="line">adata</span><br><span class="line">AnnData <span class="built_in">object</span> <span class="keyword">with</span> n_obs × n_vars = <span class="number">3696</span> × <span class="number">27998</span></span><br><span class="line">    obs: <span class="string">&#x27;clusters_coarse&#x27;</span>, <span class="string">&#x27;clusters&#x27;</span>, <span class="string">&#x27;S_score&#x27;</span>, <span class="string">&#x27;G2M_score&#x27;</span></span><br><span class="line">    <span class="keyword">var</span>: <span class="string">&#x27;highly_variable_genes&#x27;</span></span><br><span class="line">    uns: <span class="string">&#x27;clusters_coarse_colors&#x27;</span>, <span class="string">&#x27;clusters_colors&#x27;</span>, <span class="string">&#x27;day_colors&#x27;</span>, <span class="string">&#x27;neighbors&#x27;</span>, <span class="string">&#x27;pca&#x27;</span></span><br><span class="line">    obsm: <span class="string">&#x27;X_pca&#x27;</span>, <span class="string">&#x27;X_umap&#x27;</span></span><br><span class="line">    layers: <span class="string">&#x27;spliced&#x27;</span>, <span class="string">&#x27;unspliced&#x27;</span></span><br><span class="line">    obsp: <span class="string">&#x27;distances&#x27;</span>, <span class="string">&#x27;connectivities&#x27;</span></span><br></pre></td></tr></table></figure>

<p>Dictionary-like object with values of the same dimensions as <code>X</code>.<br>可以理解为平行空间的对象，比如Seurat里面的count，标准化之后叫data，归一化之后叫scale.data。</p>
<h5 id="2-提取信息"><a href="#2-提取信息" class="headerlink" title="2. 提取信息"></a>2. 提取信息</h5><p>可以使用adata.然后输入Tab来查看可以使用的函数或变量。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 数据数目统计</span></span><br><span class="line">adata.n_obs  <span class="meta"># 返回细胞数 2695</span></span><br><span class="line">adata.n_vars  <span class="meta"># 返回基因数 18270</span></span><br><span class="line">adata.shape <span class="meta"># (2695, 18270)</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 数据键值提取</span></span><br><span class="line">adata.obs_keys() <span class="meta"># 细胞注释信息的keys，比如 [&#x27;ClusterID&#x27;, &#x27;ClusterName&#x27;, &#x27;SCT_snn_res_0_8&#x27;, &#x27;nCount_SCT&#x27;, &#x27;nCount_Spatial&#x27;, &#x27;nFeature_SCT&#x27;, &#x27;nFeature_Spatial&#x27;, &#x27;orig_ident&#x27;, &#x27;seurat_clusters&#x27;, &#x27;imagecol&#x27;, &#x27;imagerow&#x27;&#x27;]</span></span><br><span class="line">adata.obs_names  <span class="meta"># 返回细胞ID 数据类型是object</span></span><br><span class="line">adata.<span class="keyword">var</span>.index  <span class="meta"># 返回基因 数据类型是object</span></span><br><span class="line">adata.var_names.to_list()  <span class="meta"># 返回基因 数据类型是list</span></span><br><span class="line">adata.obs.head() <span class="meta"># 查看前5行的数据</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 其他的数据组成也可以使用</span></span><br></pre></td></tr></table></figure>

<p>数据的索引和取切片等操作参考<a href="https://www.jianshu.com/p/f2356f59b6e6">numpy</a>和<a href="https://www.jianshu.com/p/926d819406ca">pandas</a>。</p>
]]></content>
  </entry>
  <entry>
    <title>单细胞多组学所需的scRNA部分处理</title>
    <url>/2023/08/06/%E5%8D%95%E7%BB%86%E8%83%9E%E5%A4%9A%E7%BB%84%E5%AD%A6%E6%89%80%E9%9C%80%E7%9A%84scRNA%E9%83%A8%E5%88%86%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">library<span class="punctuation">(</span>Seurat<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># load 10x v3 pbmc data</span></span><br><span class="line">counts <span class="operator">&lt;-</span> Read10X_h5<span class="punctuation">(</span><span class="string">&quot;raw_data/10x_scrna/pbmc10k_v3/pbmc_10k_v3_filtered_feature_bc_matrix.h5&quot;</span><span class="punctuation">)</span></span><br><span class="line">rownames<span class="punctuation">(</span>counts<span class="punctuation">)</span> <span class="operator">&lt;-</span> make.unique<span class="punctuation">(</span>rownames<span class="punctuation">(</span>counts<span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">rna <span class="operator">&lt;-</span> CreateSeuratObject<span class="punctuation">(</span>counts <span class="operator">=</span> counts<span class="punctuation">,</span> assay <span class="operator">=</span> <span class="string">&#x27;RNA&#x27;</span><span class="punctuation">,</span> min.cells <span class="operator">=</span> <span class="number">5</span><span class="punctuation">,</span> min.features <span class="operator">=</span> <span class="number">500</span><span class="punctuation">,</span> project <span class="operator">=</span> <span class="string">&#x27;10x_RNA&#x27;</span><span class="punctuation">)</span></span><br><span class="line">scrublet <span class="operator">&lt;-</span> read.table<span class="punctuation">(</span><span class="string">&quot;raw_data/10x_scrna/pbmc10k_v3/matrix_doublets.tsv&quot;</span><span class="punctuation">,</span> sep <span class="operator">=</span> <span class="string">&quot;\t&quot;</span><span class="punctuation">,</span> col.names <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&#x27;observed&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;simulated&#x27;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">rownames<span class="punctuation">(</span>scrublet<span class="punctuation">)</span> <span class="operator">&lt;-</span> colnames<span class="punctuation">(</span>counts<span class="punctuation">)</span></span><br><span class="line">rna <span class="operator">&lt;-</span> AddMetaData<span class="punctuation">(</span>rna<span class="punctuation">,</span> metadata <span class="operator">=</span> scrublet<span class="punctuation">)</span></span><br><span class="line">rna <span class="operator">&lt;-</span> RenameCells<span class="punctuation">(</span>rna<span class="punctuation">,</span> add.cell.id <span class="operator">=</span> <span class="string">&#x27;rna&#x27;</span><span class="punctuation">)</span></span><br><span class="line">mito.features <span class="operator">&lt;-</span> grep<span class="punctuation">(</span>pattern <span class="operator">=</span> <span class="string">&quot;^MT-&quot;</span><span class="punctuation">,</span> x <span class="operator">=</span> rownames<span class="punctuation">(</span>x <span class="operator">=</span> rna<span class="punctuation">)</span><span class="punctuation">,</span> value <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">)</span></span><br><span class="line">percent.mito <span class="operator">&lt;-</span> Matrix<span class="operator">::</span>colSums<span class="punctuation">(</span>x <span class="operator">=</span> GetAssayData<span class="punctuation">(</span>object <span class="operator">=</span> rna<span class="punctuation">,</span> slot <span class="operator">=</span> <span class="string">&#x27;counts&#x27;</span><span class="punctuation">)</span><span class="punctuation">[</span>mito.features<span class="punctuation">,</span> <span class="punctuation">]</span><span class="punctuation">)</span> <span class="operator">/</span> Matrix<span class="operator">::</span>colSums<span class="punctuation">(</span>x <span class="operator">=</span> GetAssayData<span class="punctuation">(</span>object <span class="operator">=</span> rna<span class="punctuation">,</span> slot <span class="operator">=</span> <span class="string">&#x27;counts&#x27;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">rna<span class="operator">$</span>percent.mito <span class="operator">&lt;-</span> percent.mito</span><br><span class="line"></span><br><span class="line"><span class="comment"># QC</span></span><br><span class="line">rna <span class="operator">&lt;-</span> subset<span class="punctuation">(</span>x <span class="operator">=</span> rna<span class="punctuation">,</span> subset <span class="operator">=</span> nCount_RNA <span class="operator">&gt;</span> <span class="number">2000</span> <span class="operator">&amp;</span> nCount_RNA <span class="operator">&lt;</span> <span class="number">20000</span> <span class="operator">&amp;</span> percent.mito <span class="operator">&lt;</span> <span class="number">0.2</span> <span class="operator">&amp;</span> observed <span class="operator">&lt;</span> <span class="number">0.1</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># preprocessing</span></span><br><span class="line">rna <span class="operator">&lt;-</span> NormalizeData<span class="punctuation">(</span>rna<span class="punctuation">)</span></span><br><span class="line">rna <span class="operator">&lt;-</span> FindVariableFeatures<span class="punctuation">(</span>rna<span class="punctuation">,</span> nfeatures <span class="operator">=</span> <span class="number">3000</span><span class="punctuation">)</span></span><br><span class="line">rna <span class="operator">&lt;-</span> ScaleData<span class="punctuation">(</span>rna<span class="punctuation">)</span></span><br><span class="line">rna <span class="operator">&lt;-</span> RunPCA<span class="punctuation">(</span>rna<span class="punctuation">,</span> npcs <span class="operator">=</span> <span class="number">100</span><span class="punctuation">)</span></span><br><span class="line">rna <span class="operator">&lt;-</span> RunTSNE<span class="punctuation">(</span>rna<span class="punctuation">,</span> dims <span class="operator">=</span> <span class="number">1</span><span class="operator">:</span><span class="number">30</span><span class="punctuation">)</span></span><br><span class="line">rna <span class="operator">&lt;-</span> FindNeighbors<span class="punctuation">(</span>rna<span class="punctuation">,</span> dims <span class="operator">=</span> <span class="number">1</span><span class="operator">:</span><span class="number">30</span><span class="punctuation">)</span></span><br><span class="line">rna <span class="operator">&lt;-</span> FindClusters<span class="punctuation">(</span>rna<span class="punctuation">,</span> resolution <span class="operator">=</span> <span class="number">0.4</span><span class="punctuation">,</span> algorithm <span class="operator">=</span> <span class="number">3</span><span class="punctuation">)</span></span><br><span class="line">rna <span class="operator">&lt;-</span> RunUMAP<span class="punctuation">(</span>rna<span class="punctuation">,</span> graph <span class="operator">=</span> <span class="string">&#x27;RNA_nn&#x27;</span><span class="punctuation">,</span> metric <span class="operator">=</span> <span class="string">&#x27;euclidean&#x27;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">new.cluster.ids <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span></span><br><span class="line">  <span class="string">&quot;CD14+ Monocytes&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&#x27;CD4 Memory&#x27;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&#x27;CD4 Naive&#x27;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&#x27;pre-B cell&#x27;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&#x27;Double negative T cell&#x27;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&#x27;NK cell&#x27;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&#x27;B cell progenitor&#x27;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&#x27;CD8 effector&#x27;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&#x27;CD8 Naive&#x27;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&#x27;CD16+ Monocytes&#x27;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&#x27;Dendritic cell&#x27;</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="string">&#x27;pDC&#x27;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&#x27;Platelet&#x27;</span></span><br><span class="line"><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">names</span><span class="punctuation">(</span>x <span class="operator">=</span> new.cluster.ids<span class="punctuation">)</span> <span class="operator">&lt;-</span> levels<span class="punctuation">(</span>x <span class="operator">=</span> rna<span class="punctuation">)</span></span><br><span class="line">rna <span class="operator">&lt;-</span> RenameIdents<span class="punctuation">(</span>object <span class="operator">=</span> rna<span class="punctuation">,</span> new.cluster.ids<span class="punctuation">)</span></span><br><span class="line">rna<span class="operator">$</span>celltype <span class="operator">&lt;-</span> Idents<span class="punctuation">(</span>rna<span class="punctuation">)</span></span><br><span class="line">nk.cells <span class="operator">&lt;-</span> subset<span class="punctuation">(</span>rna<span class="punctuation">,</span> subset <span class="operator">=</span> celltype <span class="operator">==</span> <span class="string">&#x27;NK cell&#x27;</span><span class="punctuation">)</span></span><br><span class="line">gzmk <span class="operator">&lt;-</span> GetAssayData<span class="punctuation">(</span>nk.cells<span class="punctuation">,</span> assay <span class="operator">=</span> <span class="string">&#x27;RNA&#x27;</span><span class="punctuation">,</span> slot <span class="operator">=</span> <span class="string">&#x27;data&#x27;</span><span class="punctuation">)</span><span class="punctuation">[</span><span class="string">&#x27;GZMK&#x27;</span><span class="punctuation">,</span> <span class="punctuation">]</span></span><br><span class="line">nk.cells<span class="operator">$</span>bright <span class="operator">&lt;-</span> ifelse<span class="punctuation">(</span>gzmk <span class="operator">&gt;</span> <span class="number">1</span><span class="punctuation">,</span> <span class="string">&#x27;NK bright&#x27;</span><span class="punctuation">,</span> <span class="string">&#x27;NK dim&#x27;</span><span class="punctuation">)</span></span><br><span class="line">ctypes <span class="operator">&lt;-</span> as.vector<span class="punctuation">(</span>rna<span class="operator">$</span>celltype<span class="punctuation">)</span></span><br><span class="line"><span class="built_in">names</span><span class="punctuation">(</span>ctypes<span class="punctuation">)</span> <span class="operator">&lt;-</span> <span class="built_in">names</span><span class="punctuation">(</span>rna<span class="operator">$</span>celltype<span class="punctuation">)</span></span><br><span class="line">ctypes<span class="punctuation">[</span>Cells<span class="punctuation">(</span>nk.cells<span class="punctuation">)</span><span class="punctuation">]</span> <span class="operator">&lt;-</span> nk.cells<span class="operator">$</span>bright</span><br><span class="line">rna <span class="operator">&lt;-</span> AddMetaData<span class="punctuation">(</span>rna<span class="punctuation">,</span> metadata <span class="operator">=</span> ctypes<span class="punctuation">,</span> col.name <span class="operator">=</span> <span class="string">&#x27;celltype&#x27;</span><span class="punctuation">)</span></span><br><span class="line">saveRDS<span class="punctuation">(</span>rna<span class="punctuation">,</span> <span class="string">&quot;seurat_objects/pbmc_10k_v3.rds&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>生信</category>
      </categories>
      <tags>
        <tag>单细胞</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo部署自定义live2d(moc3版)</title>
    <url>/2023/08/11/hexo%E9%83%A8%E7%BD%B2%E8%87%AA%E5%AE%9A%E4%B9%89live2d-moc3%E7%89%88/</url>
    <content><![CDATA[<p>说真的，hexo自带的live2d需要更新一下了，又少又不怎么好看，其中只有两个小动物我还可以接受。总之，由于现在很多新的live2d都是用的moc3，hexo的live2d模块如<code>hexo-helper-live2d</code>、<code>live2d-widget</code>并不适用（它们适合moc），所以终于找到有大佬写出<a href="https://github.com/LitStronger/live2d-moc3">live2d-moc3</a>，但使用起来略微有些繁杂，又有大佬打包成了<a href="https://github.com/Weidows-projects/Live2dLoader">Live2dLoader</a>，所以能愉快地导入了（由于我那主题的锅，以及打包大佬的表述问题，其实并不怎么愉快）</p>
<h2 id="正片"><a href="#正片" class="headerlink" title="正片"></a>正片</h2><p>在你的主题或需要live2d的页面里插入。主题的话看看说明文档，哪个文件是用来进行整体页面搭建的，改就完事了（最好是提供了自定义功能的主题）</p>
<p>我这个Async主题是插入main.ejs（需要自己建立，为什么？详见<a href="https://hexo-theme-async.imalun.com/guide/config.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E6%9D%BF-layout">主题配置 | Hexo-Theme-Async</a>）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--live2d moc3导入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cubism.live2d.com/sdk-web/cubismcore/live2dcubismcore.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/combine/gh/dylanNew/live2d/webgl/Live2D/lib/live2d.min.js,npm/pixi.js@6.5.2/dist/browser/pixi.min.js,npm/pixi-live2d-display/dist/index.min.js,gh/Weidows-projects/Live2dLoader/dist/Live2dLoader.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> models = [</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">width</span>: <span class="number">1980</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">height</span>: <span class="number">200</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">left</span>: <span class="string">&quot;10px&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">bottom</span>: <span class="string">&quot;0px&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">role</span>: <span class="string">&quot;https://cdn.jsdelivr.net/gh/用户名/仓库名/文件夹名/模型名.model3.json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">background</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">opacity</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">mobile</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">draggable</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  ];</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> <span class="title class_">Live2</span>dLoader(models);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>模型名要与文件夹名一致，文件夹外面有多少文件夹不要紧</p>
</blockquote>
<p>可以导入多个，在[]里加入就行，最后要再new一个models，不过我没试过，大概是这样的。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--live2d moc3导入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cubism.live2d.com/sdk-web/cubismcore/live2dcubismcore.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/combine/gh/dylanNew/live2d/webgl/Live2D/lib/live2d.min.js,npm/pixi.js@6.5.2/dist/browser/pixi.min.js,npm/pixi-live2d-display/dist/index.min.js,gh/Weidows-projects/Live2dLoader/dist/Live2dLoader.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> models = [</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">width</span>: <span class="number">1980</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">height</span>: <span class="number">200</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">left</span>: <span class="string">&quot;10px&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">bottom</span>: <span class="string">&quot;0px&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">role</span>: <span class="string">&quot;https://cdn.jsdelivr.net/gh/用户名/仓库名/文件夹名/模型名.model3.json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">background</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">opacity</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">mobile</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">draggable</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">     &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">width</span>: <span class="number">1980</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">height</span>: <span class="number">200</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">left</span>: <span class="string">&quot;10px&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">bottom</span>: <span class="string">&quot;0px&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">role</span>: <span class="string">&quot;https://cdn.jsdelivr.net/gh/用户名/仓库名/文件夹名/模型名.model3.json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">background</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">opacity</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">mobile</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">draggable</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  ];</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> <span class="title class_">Live2</span>dLoader(models);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> <span class="title class_">Live2</span>dLoader(models);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>将hexo本地博客部署到github</title>
    <url>/2023/08/13/%E5%B0%86hexo%E6%9C%AC%E5%9C%B0%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0github/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;github用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;创建github的邮箱&quot;</span></span><br><span class="line"> <span class="comment"># 生成 ssh 密钥</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;创建github的邮箱&quot;</span></span><br></pre></td></tr></table></figure>

<p>一般执行上述命令之后，会生成 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 两个文件，前者是我们私有的，而后者则是对外开放的。接着找到生成的 <code>.ssh</code> 的文件夹中的 id_rsa.pub 密钥，将内容复制；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>

<p>去github账户-settings-SSH and GPG keys-New SSH key，粘贴就行，title可以命名成“hexo”</p>
<p>然后去配置文件<code>_config.yml</code>中设置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/YesseniaCQ/YesseniaCQ.github.io.git</span> <span class="comment">#仓库链接</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure>

<p>最后在git bash输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean  <span class="comment">#删除生成的文件和缓存</span></span><br><span class="line">hexo g      <span class="comment">#生成静态文件，也就是public文件夹</span></span><br><span class="line">hexo d      <span class="comment">#部署网站</span></span><br></pre></td></tr></table></figure>

<h3 id="hexo-d后出现报错？"><a href="#hexo-d后出现报错？" class="headerlink" title="hexo d后出现报错？"></a>hexo d后出现报错？</h3><p>“# ERROR Deployer not found: git” 原因：这是因为没安装<code>hexo-deployer-git</code>插件，在项目目录下运行以下命令安装即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>使用hexo构建博客时出现报错</title>
    <url>/2023/08/06/%E4%BD%BF%E7%94%A8hexo%E6%9E%84%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%97%B6%E5%87%BA%E7%8E%B0%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<p>在Hexo博客中，出现Cannot GET&#x2F;xxx错误便意味着xxx文件未被找到。Cannot GET&#x2F;xxx错误本质是hexo server返回的一个404错误。</p>
<p>因此，排查方式如下：</p>
<ol>
<li><p>判断public目录下xxx文件是否存在。<br>（我的错误是 Cannot GET &#x2F;，因此在public目录下寻找index.html是否存在。）</p>
</li>
<li><p>如果说index.html不存在，那么执行hexo c，hexo g重新生成一次，回到步骤1。</p>
</li>
<li><p>步骤2执行完后index.html仍不存在，执行<code>npm audit fix</code></p>
</li>
</ol>
  <figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">  $ npm audit fix</span><br><span class="line">  npm ERR! code ELOCKVERIFY</span><br><span class="line">  npm ERR! Errors were found <span class="keyword">in</span> your package-lock.json, run  npm install  to fix them. #如果有直接告诉可能的修法，先尝试。</span><br><span class="line">  npm ERR!     Missing: hexo-renderer-marked@^<span class="number">6</span>.<span class="number">0</span>.<span class="number">0</span> #缺少的组件</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of this run can be found <span class="keyword">in</span>:</span><br><span class="line">npm ERR!     D:\tools\blog\node.js\node_cache\_logs\<span class="number">2023</span>-<span class="number">08</span>-<span class="number">06</span>T08_58_55_270Z-debug.log</span><br></pre></td></tr></table></figure>

<blockquote>
<p>有几点需要看：<br>    1. 如果有直接告诉可能的修法，先尝试。<br>     2. 查看是否少了什么组件，通过npm install hexo-xxx-xxx 安装试试。（如上述报错，hexo缺少了hexo-renderer-marked组件，因此执行npm install hexo-renderer-marke）<br>     3. 组件安装失败可以试试用cnpm安装</p>
</blockquote>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-renderer-marked --save #虽然还是有报错，但index.html生成了</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>步骤3完成之后，执行hexo c，hexo g重新生成静态文件。</li>
</ol>
<h3 id="总结下来的构建方式"><a href="#总结下来的构建方式" class="headerlink" title="总结下来的构建方式"></a>总结下来的构建方式</h3><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">npx hexo int</span><br><span class="line">cnpm install</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">npx hexo init</span><br><span class="line">npm install dependencies</span><br><span class="line">npm audit fix#查看缺少什么模块</span><br><span class="line">cnpm install hexo-renderer-marked@^<span class="number">6</span>.<span class="number">0</span>.<span class="number">0</span></span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>运用Git LFS往github上传大文件</title>
    <url>/2023/08/09/%E8%BF%90%E7%94%A8Git-LFS%E5%BE%80github%E4%B8%8A%E4%BC%A0%E5%A4%A7%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>由于git不能上传&gt;25mb的文件，一些科研数据或视频等需要借用git lfs插件下载。</p>
<p>此记录是在win11系统上。</p>
<h2 id="git-和-Git-LFS-的安装"><a href="#git-和-Git-LFS-的安装" class="headerlink" title="git 和 Git LFS 的安装:"></a>git 和 Git LFS 的安装:</h2><h3 id="git-可以通过git-osx-installer-下载。"><a href="#git-可以通过git-osx-installer-下载。" class="headerlink" title="git 可以通过git-osx-installer&#x2F;下载。"></a>git 可以通过<a href="https://link.zhihu.com/?target=https://sourceforge.net/projects/git-osx-installer/">git-osx-installer</a>&#x2F;下载。</h3><p><img src="https://pic1.zhimg.com/80/v2-e5ac74f0e4d0ef050ef338609044a27c_720w.webp" alt="img" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="Git-LFS-可以通过Git-Large-File-Storage下载。"><a href="#Git-LFS-可以通过Git-Large-File-Storage下载。" class="headerlink" title="Git LFS 可以通过Git Large File Storage下载。"></a>Git LFS 可以通过<a href="https://link.zhihu.com/?target=https://git-lfs.github.com">Git Large File Storage</a>下载。</h3><p><img src="https://pic1.zhimg.com/80/v2-eb7996c6e5b98e42cb36f188f397270c_720w.webp" alt="img" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<blockquote>
<p>下载完成后将Git LFS的路径加不加入全局变量应该不重要，如果不能用可以试着加一下（这一步我没做）</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">vim ~/.zprofile</span><br><span class="line">#按i键进入编辑模式，将Git LFS的路径export</span><br><span class="line">#按Esc键退出编辑模式，输入:wq并按Enter键保存编辑</span><br></pre></td></tr></table></figure>
<p>实际如下图所示（参考的教程中）<br><img src="https://pic1.zhimg.com/80/v2-f5891f337e28e7df46d54638a6e73584_720w.webp" alt="img" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>或者可以直接在环境变量-用户变量里加。</p>
</blockquote>
<h2 id="配置git-lfs，连接git仓库，上传文件"><a href="#配置git-lfs，连接git仓库，上传文件" class="headerlink" title="配置git lfs，连接git仓库，上传文件"></a>配置git lfs，连接git仓库，上传文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> upload <span class="comment">#进入名为upload的文件夹，提前将要上传的大文件放入该文件夹下</span></span><br><span class="line">git init <span class="comment">#创建本地仓库环境</span></span><br><span class="line">git lfs install <span class="comment">#安装大文件上传应用</span></span><br><span class="line">git lfs track * <span class="comment">#追踪要上传的大文件，*表示路径下的所有文件</span></span><br><span class="line">git add .gitattributes <span class="comment">#添加先上传的属性文件(要先上传属性文件，不然有可能失败)</span></span><br><span class="line">git commit -m <span class="string">&quot;pre&quot;</span> <span class="comment">#添加属性文件上传的说明</span></span><br><span class="line">git remote add origin git仓库地址 <span class="comment">#建立本地和Github仓库的链接</span></span><br><span class="line">git push origin master <span class="comment">#上传属性文件</span></span><br><span class="line">git add * <span class="comment">#添加要上传的大文件，*表示路径下的所有文件</span></span><br><span class="line">git commit -m <span class="string">&quot;Git LFS commit&quot;</span> <span class="comment">#添加大文件上传的说明</span></span><br><span class="line">git push origin master <span class="comment">#上传大文件</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>构建Grns的工具汇总</title>
    <url>/2023/08/08/%E6%9E%84%E5%BB%BAGrns%E7%9A%84%E5%B7%A5%E5%85%B7%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<p>研究GRN时进行的现有方法整理，摘自《单细胞多组学时代的基因调控网络推理》[^1] ，由我进行翻译和补充。</p>
<p>$$ E &#x3D; mc^2 $$<br>[ E &#x3D; mc^2 ]</p>
<p>ANANSE从未配对的RNA-seq和ATAC-seq数据中推断出细胞类型特异性的GRN，这些数据是作为开放峰BAM文件的集合提供的，以及标准化的基因表达文本文件，每个样本和模态一个文件。它通过使用先前在REMAP2的大量ChIP-seq数据集合上训练的逻辑回归模型预测DNA结合的概率，将TF分配给开放峰。为了预测TF结合概率，该模型利用观察到的二进制峰值可及性和通过使用基序数据库CIS-BP4运行基序匹配器算法GimmeMotifs3获得的基序分数。为了给基因分配峰，ANANSE通过它们的基因组距离来加权相互作用，默认情况下距离基因TSS最多100 kb。峰到TSS的距离越大，其权重越低。基于此，它通过聚合由基因组距离加权的峰之间的所有结合概率来计算TF基因结合分数。它拟合了一个线性回归模型，其中脊正则化将观察到的二元峰可及性作为响应变量，并将先前获得的基序分数作为生成TF活性分数的系数，这些是拟合的基序系数。为了模拟最终的GRN，ANANSE通过平均缩放四个分数的等级来计算相互作用分数：（1）TF基因表达，（2）靶基因表达，（3）TF结合分数和（4）TF活性。最终的TF-基因相互作用范围从0到1，表明没有调节。此外，ANANSE可以从不同细胞类型或条件的源和靶网络构建差异GRN。将差异GRN与差异表达测试结果相结合，它计算出一个影响分数，可用于根据对比中的相关性对TF进行排名。</p>
<p>CellOracle使用scRNA-seq数据以不成对的方式从基于ATAC-seq数据构建的碱基GRN中推断上下文特异性GRN。通常，碱基GRN是从存储在Cell Data Set对象中的细胞类型或样本特异性scATAC-seq矩阵创建的。首先，使用HOMER6的注释将基因的TSS定位在可访问的ATAC-seq峰内，从而识别启动子和近端增强子区域。然后使用CICERO7基于区域的共同可访问性来识别远端调节元件。如果峰值与包含TSS的峰值的共同可访问性得分至少为0.8，并且距离峰值在500 kb以内，则峰值被视为远端调节元件。接下来，TFs通过GimmeMotifs3 python包及其主题数据库的TF基序扫描与峰值相关联，具有误判率阈值。然后将每个识别的TF-基因链接包含在基本GRN中。对于GRN的上下文化，使用存储在AnnData对象中的原始转录计数根据基因表达将数据集划分为几个集群，以识别特定的细胞类型或细胞状态。对于每个集群，使用线性回归模型根据潜在调节基因的表达预测目标基因的表达。特此，CellOracle使用贝叶斯岭回归或Bagging（引导聚合）岭回归估计每个TF-基因相互作用的边缘强度。得到的边缘强度系数分布用于通过进行单样本t检验来计算边缘强度的p值，以确定该系数是否与零显著不同。最后，可以根据p值和边缘强度系数的绝对平均值选择TF-基因相互作用，以形成最终的上下文化GRN。</p>
<p>DC3利用非负矩阵分解来同时反卷积批量或单细胞RNA-seq、ATAC-seq和Hi-C数据，并整合这些不成对的模式。它通过预先计算的表达矩阵、开放性矩阵和以文本文件提供的循环计数的线性建模方法构建细胞类型特定的GRN。DC3通过首先生成伪批量RNA和ATAC配置文件来识别每种细胞类型的关键调节因子。从ATAC配置文件中，它使用带有未定义主题数据库的HOMER6将TF与峰值匹配，并计算取决于主题富集的p值和TF表达的折叠变化的主题富集分数。然后，根据它们的基因表达水平、它们的基序富集分数以及它们与至少一种其他细胞类型相比是否有显著差异表达，为每种细胞类型选择TF。DC3不是基于基因组距离的方法，而是根据来自Hi-C数据的循环计数分配峰值基因对。接下来，模型通过计算TF和目标基因表达之间的相关性来生成TF峰值基因三胞胎。然后，TF-基因相互作用权重被分配为基序分数和循环计数乘积的总和。最后，GRN的节点分为三类之一：（1）核心，当节点既充当调节器又充当目标时，（2）上游，当节点仅充当调节器时，以及（3）下游，当节点仅充当目标时。</p>
<p>DeepMAPS是一个深度学习框架，它将成对的单细胞多组学数据投射到异构图表示中，找到细胞和基因的联合嵌入。然后，它推断出每个恢复的细胞类型簇的GRN。因此，用户必须提供来自JASPAR数据库10的H5格式、ATAC片段TSV文件和TF结合信息的基因表达和染色质可及性计数矩阵。峰值-基因链接是通过计算位于TSS上下游或基因外显子区域内150 kb内的每个峰值的调节潜在分数来推断的，如MAESTRO中所述。调节电位分数被定义为峰的开放性和调节电位权重的乘积，权重描述峰到TSS的基因组距离（+&#x2F;-150 kb或在外显子区域）。通过使用来自JASPAR的带有TF结合基序的PWMScan24计算结合亲和力分数，通过一定的p值阈值来识别TF峰链接。接下来，为给定细胞中的每个TF基因链接计算调节强度分数，分别作为调节电位分数之和和和所有相关峰基因和TF峰链接的所有结合亲和力分数之和的乘积。基于目标基因的调节强度分数，计算给定集群中跨细胞的每个TF的调节活性分数。使用Wilcoxon秩和检验测试集群之间的差异活性。p值小于0.05且logFC大于0.10的调节被认为是集群特异性的。最终的GRN是通过合并所有集群特异性调节因子来构建的。最后，TF节点根据其特征向量中心性进行排名，排名前10位的最高TF被确定为集群特异性主TF。</p>
<p>Dictys从未配对的scRNA-seq数据和作为存储在TSV文件中的RNA读取计数矩阵提供的批量或scATAC-seq数据以及作为BAM文件读取的ATAC数据中推断出来自细胞类型或动态GRN等组的稳态GRN。Dictys首先从ATAC-seq数据构建支架网络。因此，用MACS213调用伪批量染色质可及性峰，并保留前500,000个峰。后来，来自pyDNase14的Wellington引导程序用于注释TF足迹，HOMER6用于扫描来自HOMER6或HOCOMOCO15的TF基序的峰。TF-基因链接被估计为足迹注释概率之和的最大值，基序的纯度，以及距离TSS最大500 kb的窗口中到基因的距离。每个基因的前20个TF保存在初始支架网络中。在下一步中，该网络通过建模基因表达动力学来完善，该动力学是与该基因链接的每个可能TF的转录调节强度的函数，同时还建模技术变异。基因表达动力学的建模基于Ornstein-Uhlenbeck随机过程，其中稳态分布代表每个细胞的生物表达变异。技术变化通过稀疏二项抽样建模。他们的建模过程产生了动态基因调控网络，该网络解释了反馈回路，并可以模拟基因扰动，从中得出具有直接和间接关系的最终调控网络。Dictys进一步允许从用户提供的轨迹中进行动态GRN推断，其中定义了移动窗口，首先生成静态单个GRN，然后是高斯核平滑和创建组合动态网络。</p>
<p>DIRECT-NET16从配对的scRNA-seq和scATAC-seq多组数据或单独的scATAC-seq构建细胞类型特定的GRN。数据以10x h5特征计数矩阵的形式提供，同时提供一个片段TSV文件，从中创建Seurat对象。首先，DIRECT-NET通过在用户定义的数据低维表示中聚合基于KNN图选择的相似细胞的基因表达和&#x2F;或染色质可及性配置文件来创建假细胞。获得的两个组学的聚合配置文件通过DESeq217中实现的缩放因子进行归一化。为了识别功能峰-基因链接，DIRECT-NET基于XGBoost18构建了一个非线性回归模型。对于每个基因，它首先从TSS上游识别其启动子峰500 bp和增强子峰250 kb。当只有ATAC-seq数据可用时，模型根据其他潜在链接峰的聚合可及性预测观察到的聚合启动子可及性。当两个组学都可用时，模型根据其他潜在链接峰的聚合可及性预测观察到的聚合基因表达。对于每个远端峰，模型返回一个重要性分数，该分数对应于该峰对于预测给定基因表达的重要性程度。接下来，DIRECT-NET通过将重要性分数高于总体重要性分数中位数的所有峰与每种细胞类型中的差异可及峰重叠来检测高置信度功能峰。然后，使用基序扫描方法MOODs19和JASPAR10基序数据库将TF分配给峰。最后，GRN是通过只保留与被认为是给定细胞类型的标记基因的基因的链接来构建的。</p>
<p>FigR从配对的RNA-seq和ATAC-seq数据中生成GRN。它首先通过计算峰可及性的Spearman相关性和给定基因的TSS上下50 kb的搜索窗口内所有峰的基因表达来生成峰基因链接。接下来，通过使用单尾z检验对随机背景峰的置换相关系数进行测试来识别重要的峰基因链接。只有具有正相关的重要峰基因对被保留。然后，FigR识别了具有高密度峰基因相互作用的被称为调节染色质域（DORC）的基因集。对于每个集合和细胞，通过对显著相关峰的以均值为中心的归一化计数求和来计算可访问性分数。为了推断从TF到这些调节集的链接，FIG R计算调节分数。因此，它将TF表达式和调节区域集的可访问性分数之间的Spearman相关性与由基序匹配算法MOODs19识别的同一集合中CIS-BP4数据库中TF基序的相对丰富相结合。对于每个DORC，它根据平滑的DORC分数矩阵识别k个最近邻DORC，并选择自身及其相关峰的联合，创建一个峰池。使用TF峰关联，它计算由chromVAR21选择的池化峰和置换背景峰集（n&#x3D;50）的TF频率，允许它使用z检验进行显著性测试。每个TF-DORC对的调节分数取决于相关性的方向以及富集和相关性的显著性。在最终的GRN中，正值表示给定的TF正向调节下游DORC，负值则相反。</p>
<p>GLUE同时从存储为AnnData对象的不同单细胞模式中学习特征和细胞嵌入。前者是通过在将启动子区域的峰与相应基因连接起来的先验生物知识图上训练图自编码器来学习的。然后定义一个特征嵌入空间。后者是通过每个模态训练一个变分自动编码器来学习的，该编码器还使用特征嵌入将细胞嵌入映射回它们的输入空间。训练后，当应用于scATAC-seq和scRNA-seq数据时，GLUE可以根据特征嵌入之间的余弦相似度推断峰基因链接（FDR校正的p值低于0.05）。然后可以根据不同的标准过滤峰基因连接，例如到TSS的距离（在他们的研究案例中考虑了150 kb的窗口）或来自Hi-C和eQTL数据的信息。然后，pySCENIC框架将被调整以利用这些顺式调节链接。首先，扫描基因组以基于TF结合基序建立TF-峰链接。GLUE推断的峰基因连接和基序支持的TF-峰结合链接都被整合到TF-基因顺式调节假说中，该假说通过每个TF-基因对共有的ATAC峰的数量来考虑。其次，GRNBoost2应用于scRNA-seq数据，基于共表达测量TF-基因关联。最后，基于表达的网络被顺式调节排名修剪，以保留TF-基因与顺式调节证据的连接。为了不仅仅因为在基因体附近没有测量到ATAC峰而错过法规，定义了第二组TF-基因调节链接。管道是相似的，但是GLUE推断的峰基因链接被基因和TSS侧翼区域之间的关联所取代。两组调节相互作用在最终输出中保持分离。</p>
<p>GRaNIE23从配对的大容量或单细胞染色质可及性峰值和RNA-seq计数表中推断出细胞类型特异性GRN。对于单细胞数据，转录组和ATAC-seq配置文件存储在多模态Seurat对象中。原始数据经过DESeq2’s17比率中位数或分位数归一化，并过滤以获得低读取计数和长峰值宽度。接下来，来自所有TF的预测TF结合位点，无论是自行预先计算的还是使用HOCOMOCO15或JASPAR10数据库从PWMscan24编译的，都与开放染色质峰重叠。GRaNIE然后计算TF表达水平和每个峰值信号之间的样本之间的成对Pearson相关性。对于每个TF，相关性被离散到箱中，对于每个箱，通过将没有识别的TF结合位点的TF-峰链接的数量除以该箱中的TF-峰链接的总数来计算经验FDR。此外，TF可以根据有和没有TF结合位点的峰的相关性分布分为假定的激活因子或抑制因子。与TF峰链接的推断类似，GRaNIE基于基因表达水平的Pearson相关性和来自TSS的250 kb内每个峰的峰值信号来识别峰基因链接。可选地，Hi-C数据可用于推断空间染色质结构，并通过仅测试具有拓扑相关域的峰基因对来取代基于基因组距离的方法。对于峰基因链接，FDR是通过使用Benjamini-Hochberg执行多次测试调整来计算的。默认情况下，最终GRN由通过FDR为0.2的箱中的TF峰链接和具有正相关且FDR小于0.1的峰基因链接的组合组成。GRaNIE还提供了一些质量控制，包括评估正与负峰基因相关性以判断信噪比，以及采用基于排列的方法进行比较。</p>
<p>Inferelator 2.5使用不成对的批量RNA-seq和批量ATAC-seq数据构建稳态GRN。它首先根据ATAC-seq数据和作为可访问峰的BED文件、TF基序PFMs目录和基因组特征位置（TSS，基因体）的BED文件提供的基序信息生成先前的支架GRN。当峰值位于基因体上下10kb的搜索窗口内时，它会分配给基因。接下来，它利用来自CIS-BP4、ENCODE26和TRANSFAC27数据库的基序信息，并扫描与FIMO28连接的峰区域，以找到显着丰富的TF基序。Inferelator 2.5将基因表达建模为TF活动和TF-基因相互作用的多元线性组合。它首先通过拟合一个模型来估计TF活性，其中解释变量是观察到的基因表达，协变量是支架GRN的二元拓扑和未知的TF活性。TF活性估计是通过找到最小二乘解来获得的。为了获得TF-基因相互作用系数，它基于先前获得的TF活性建立了一个基因表达的稀疏正则化线性模型，同时通过非负惩罚矩阵结合先验信息作为支架GRN中TF-基因链接的证据。在最终的GRN中，基于TF和基因之间的偏相关性优先考虑高置信度TF-基因链接。</p>
<p>Inferelator 3.0采用多任务学习方法从不成对的大块或单细胞RNA-seq和ATAC-seq数据构建GRN。表达数据被聚类并作为单独的学习任务提交，从中推断出单个GRN。它首先从ATAC-seq数据和作为峰的BED文件提供的基序信息生成先前的支架GRN，TF基序的MEME文件以及参考GTF和FASTA文件。当峰值位于TSS上游50 kb和下游2.5 kb的窗口内时，将其分配给基因。接下来，它利用来自JASPAR10、CIS-BP4和TRANSFAC27的基序，并使用FIMO28扫描峰值以找到重要的TF。对于每个TF-峰链接，基于在基序序列的每个位置观察到特定碱基的概率计算有效信息含量（EIC）分数。然后将TF-基因结合分数定义为最大EIC值。对于每个TF，这些结合分数被聚类，并且仅保留聚类中得分最高的TF-基因对，生成稀疏先验网络。接下来，通过拟合以基因表达为解释变量、二值化先验GRN和TF活动为协变量的多元线性模型来估计TF活动。对于每个基因，Inferelator 3.0然后构建自举正则化多元线性模型，将基因表达预测为估计TF活动的加权和。最后，对于每个基因，模型被重新设计，但留下给定的TF来计算为该相互作用解释的方差量。边缘根据解释的方差进行排名，跨引导将排名组合成单个GRN，并分配基于排名的置信度分数。这是为数据中存在的每个集群（例如细胞类型或时间序列）完成的。最后，聚类GRN被聚合生成统一的GRN。</p>
<p>IReNA从未配对的scRNA-seq和批量或scATAC-seq数据为给定轨迹构建GRN。要运行IReNA，用户必须提供片段BAM文件、峰值基因链接文本文件和足迹BED文件以及基因表达数据的Seurat对象，其中伪时间信息存储在元数据中。首先，IReNA识别每个模态的GRN，然后将它们相交。对于集成组学，它使用Monocle231识别用户定义的轨迹，平滑整个轨迹的表达和表观基因组概况，并执行差异表达和可访问性分析。对于scRNA-seq GRN，IReNA选择显著差异表达的基因和在&gt;5%的细胞中表达的TFs，TFs是包含在基序数据库TRANSFAC27中的基因。通过运行随机森林回归算法GENIE332，它基于转录组学数据中的共表达来推断TF-基因对。为了确定相互作用的符号，它计算配对基因表达水平之间的皮尔逊相关性。对于ATAC-seq GRN，IReNA首先识别差异可访问峰。接下来，它通过将峰值可访问性与TSS周围+&#x2F;-250 kb搜索窗口中每个基因的表达相关联来推断峰值-基因链接，如在archR33中实现的那样。使用HINT34检测差异可达峰中的TF结合事件。然后通过FIMO28使用基序数据库TRANSFAC27扫描高质量的结合位置以寻找基序。最后，它通过交叉RNA-seq和ATAC-seq GRN来生成集成GRN。进一步向下游，IReNA可以通过在平滑的表达谱上使用k-means聚类将差异表达基因和TF分组到模块中来模块化推断的GRN。通过计算轮廓分数来估计模块的理想数量。然后可以分析模块化GRN以寻找丰富的TF，并通过通过显着截止修剪模块内的边缘来简化。</p>
<p>MAGIC从未配对的scRNA-seq和scATAC-seq数据中推断GRN。它需要一组输入TXT文件，存储有关细胞类型注释、候选差异表达基因和差异可达峰的信息、两种模式的读取计数信息、从Hi-C数据获得的TF结合基序和拓扑相关域（TADs）的先验信息。候选调控电路是通过使用MOODs19方法将chromVAR21基序库（包括CIS-BP4和ENCODE26）中的TF基序映射到候选峰来构建的。如果具有至少一个基序匹配的峰位于同一TAD内，则将它们链接到候选基因。如果没有提供关于TADs的先验信息，用户可以指定将峰与基因链接的基因组距离。两种数据模式的集成与TF活性估计相结合，并且基于这样的假设，即给定细胞类型中TF活性的分布在两种模式的细胞中是相同的，只要它们来自同一样本。对于每个TF，MAGIC学习分布，然后推断其在每个细胞中的活性。最后，对于每种细胞类型中的每个调节性TF峰基因回路，推断出TF峰结合和峰基因循环置信度。MAGIC正在贝叶斯框架中分别为每种数据模式拟合一个模型。首先，染色质可及性数据由TF-峰结合和估计的TF活性解释，其次，基因表达数据由峰-基因相互作用和调节区域活性解释，这是两个先前推断变量的组合。为了获得最终的GRN高置信度电路，根据代表迭代Gibbs采样过程中采样频率的计算后验概率进行选择。输出GRN以TXT文件的形式提供，包括TF-峰结合置信度和峰-基因-相互作用作为边缘权重。</p>
<p>MICA基于单细胞转录组数据的互信息（MI）构建GRN，然后用来自未配对染色质可及性数据的信息进行细化。MICA首先从存储在SingleCell实验性对象中的归一化scRNA-seq数据生成支架GRN。它通过使用MI计算两个基因表达水平之间的相似性来构建共表达网络，与相关性相比，MI不假设线性、连续性或依赖的其他特定属性。然后，MICA根据计算的MI值的经验分布估计每个潜在TF-基因链接的P值。接下来，MICA使用上下文特定的ATACseq数据（作为开放峰值BAM文件提供）来细化预测的TF-基因相互作用。它使用来自JASPAR10和HOCOMOCO15的基序信息用HINT34识别开放区域中富集的TF基序。然后分配到开放区域的每个TF与具有最近TSS的基因相连。然后，在共表达网络中识别的TF基因链接与来自导致最终GRN的染色质可及性的TF基因对相交。</p>
<p>Pando从存储在Seurat对象中的配对scATAC-seq和scRNA-seq数据中推断出基因调控网络。它首先通过将ATAC共识峰与来自PhasCons的已知保守区域或来自ENCODE26的预注释保守CRE相交来选择候选增强子区域。接下来，使用motifmatchr21扫描所有候选区域的TF结合基序。结合基序从JASPAR10和CIS-BP4收集，或根据与来自同一家族的其他TF的蛋白质序列相似性推断。每个包含TF结合基序的调节区域都与一个基因相连，如果它包含基因体或TSS上游100 kb。然后，使用广义线性模型，根据与结合区域和TF基因表达重叠的峰值的可及性概率预测基因表达。因此，它估计了边缘权重，该权重可以解释为TF结合位点对下游基因的调节作用。这些拟合系数使用方差分析&#x2F;t检验进行显著性测试，并使用Benjamini-Hochberg进行多次测试校正。然后过滤TF基因链接的显著性，并根据估计的系数分类为负或正调节相互作用。由此产生的GRN可以通过合并特定的可访问性配置文件来进一步上下文化，例如通过修剪具有明显较低染色质可访问性的调节链接来获得谱系或生理区域。此外，Pando允许整合Hi-C数据以确定基于TADs的峰基因链接。</p>
<p>PECA是一种概率线性模型，它从不同细胞类型或组织的配对批量RNA-seq和ATAC-seq数据中推断出样本特异性GRN。它基于峰的可及性以及TFs和染色质调节剂（所谓的辅因子）的表达来模拟基因表达的分布。为此，它使用存储在TXT文件中的FPKM或TPM标准化基因计数和存储在BAM文件中的染色质可及性数据作为输入。对于从ENCODE26获得的每个增强子，PECA识别位于TSS 1,000 kb范围内的潜在靶基因。然后，它根据峰的可及性和基因启动子区域（TSS上游2 kb）可及性之间的相关性以及峰的可及性和潜在靶基因的表达，分别计算开放性和表达的条件倍数变化。接下来，使用HOMER6将TFs分配给每个峰，并使用基序数据库JASPAR10、TRANSFAC27和UniPROBE39。最后，PECA建立了一个由三个组成部分组成的模型。（1）辅因子结合通过逻辑回归建模，该模型基于根据数据库BIOGRID40已知的辅因子结合伙伴的TFs的表达。（2）峰活性模型根据峰的可及性值和预测结合在其中的辅助因子的表达，也使用逻辑回归来预测峰是否活跃。（3）基因表达模型根据TFs及其与预测的活性峰结合的TF-复合物的表达的线性组合，将基因表达预测为高斯变量。一旦模型被拟合，PECA提取样品特异性GRNs，将表达的TFs连接到由活性峰连接的下游基因。</p>
<p>Regulatory Motifs是一种基于调控基序识别从成对的ATAC-seq和RNA-seq数据推断GRN的未命名方法。作为输入，该方法使用log-2转化的RNA和ATAC-seq计数矩阵，并从构建支架GRN开始，如果基因的TSS在给定峰的上游或下游3kb内，则将峰与靶基因连接起来。此外，其TSS位于上述基因的TSS的上游或下游5kb内的基因也与该峰相关联。TF通过使用HINT34识别峰足迹来分配给峰，这些峰足迹使用基序分析方法与HOCOMOCO15数据库中的TF基序匹配。从支架GRN中，该方法识别TF峰值基因和峰值TF基因调节基序三胞胎，并使用偏相关测试它们的表达&#x2F;可及性以获得条件独立性，只保留重要的。为了模拟共调节事件，所谓的分叉，由连接到两个TF的峰值或连接到两个基因的峰值组成，也正在测试条件独立性并按显著性过滤。对于最终的GRN，只有当它们显示内部一致性时，调节基序三胞胎才会被保留，这意味着三个可能的成对相关性相乘的最终符号是正的。</p>
<p>RENIN通过专注于寻找准确的CRE来接近配对scATAC-seq和scRNA-seq的GRN推断。多组学数据存储在Seurat对象中，首先通过VISION的s44微聚类算法的修改版本聚合为元细胞。默认情况下，元细胞分别由100个细胞和10个细胞组成，用于scATAC和scRNA阵列。多变量回归模型首先将潜在的CRE与位于TSS 500 kb范围内的基因相关联，使用模型基因表达的峰值可及性。自适应弹性网络模型用于处理单细胞数据中的稀疏性和众多共线变量，L1惩罚以降低误报率，L2惩罚以提高模型在如此高维空间中的稳定性。一旦CREs与基因相关联，TFs就通过来自CIS-BP4的TF结合基序信息与CREs和启动子相关联。通过Signac45的AddMotifs函数将基序添加到Seurat对象的每个峰。然后通过这些基序和CREs基因关联将TFs与基因相关联。最后，运行第二个自适应弹性网络模型来预测哪些TFs可能调节靶基因。推断的调节链接被签名，并且可以通过它们的调节系数进行排名。</p>
<p>scAI使用迭代矩阵分解模型聚合和集成配对的scRNA-seq和scATAC-seq数据。在运行模型之前，存储在scAI对象中的计数矩阵受到质量控制，归一化以考虑文库大小，并选择高度可变的特征。然后将因子导出为对应于与特定细胞类型相关的已知生物过程或信号的低维表示。对于这些因子中的每一个，基于差异排序方法识别因子特异性标记基因和峰。接下来，如果标记峰位于标记基因的TSS的250kb上或下游，则分配候选峰-基因关系。从候选峰-基因关系中，使用扰动方法识别调节链接。在这种方法中，计算基因表达水平和峰的可及性水平之间的皮尔逊相关性，并将其与表达水平或可及性设置为0的扰动相关性进行比较。由此，计算微分相关性，用于选择相关的峰-基因相互作用。对于TF-基因链接的识别，scAI使用motifmatchr21和CIS-BP4的TF基序，从scATAC-seq数据中推断与基因相连的每个峰的TF活性。然后根据获得的每个峰的TF活性，将非负最小二乘回归模型拟合到基因表达水平。最后，如果TF的回归系数大于零，则推断TF-基因链接。</p>
<p>sc-compReg在来自log2转化的基因表达计数矩阵和log2转化的scATAC-seq矩阵的两种条件之间进行比较GRN分析，这些条件具有可能从耦合非负矩阵分解获得的非成对模态的一致聚类分配。首先，它通过将峰分配给目标基因来构建每个条件的支架GRN，这些目标基因在每个基因的TSS和TFs的未定义窗口中重叠，使用未定义的基序匹配器和未定义的基序数据库，遵循PECA38工作流程。sc-compReg然后使用t检验识别两种条件之间的差异表达基因。对于基因差异表达的支架GRN中的每个TF基因对，它根据跨细胞的TF表达、跨峰的TF结合基序强度、开放峰的可及性水平和每个峰-基因之间的相互作用强度独立计算两种条件的调节潜力分数。如果TF的调节潜力在两种条件之间不同并且TF和靶基因之间的关联&#x2F;相关性不同，则选择条件之间的差异TF基因边缘。sc-compReg然后将获得的系数与基于伽玛分布的空分布进行比较，以检测最终的差异TF-基因链接。</p>
<p>SCENIC+从配对的scRNA-seq和scATAC-seq数据中推断出基于增强子的GRN。输入数据以原始转录本计数的形式提供，存储在AnnData对象中，旁边是一个cisTopic对象，其中包含从预处理的ATAC-seq数据和基序丰富字典的主题建模中识别的候选增强子。输入对象生成的预处理包括对细胞类型特定的伪批量配置文件进行峰值调用，并合并到一致的峰值集。仅保留通过两种数据模式QC的细胞。为了识别候选增强子，使用pycisTopic对预定义数量的共同可访问区域集进行建模。区域集概率被二值化并计算差分可访问区域。然后将假定的增强子用作基序匹配的输入。为了计算TF峰链接，使用预先计算的cisTarget基序数据库和pycisTarget基序匹配算法，该算法还包括HOMER的包装器。对于每个TF，创建一组包含相应结合基序的基因组区域。为了推断最终的eGRN，使用基于非线性树的梯度提升机回归方法来计算基于共表达的TF基因链接和峰基因链接，考虑TSS周围1-150 kb的定义搜索窗口内的所有共识峰。正相关和负相关链接由Pearson相关分离。最后，通过按区域名称将二值化的TF峰和峰基因关系相交来创建模块。通过使用来自TF-基因或峰-基因关系的重要性分数作为排名在模块的所有基因上运行GSEA来优化生成的模块。从所有前沿基因及其链接的二值化峰生成正则表达式，而包含少于10个目标基因或从负相关的峰-基因连接获得的正则表达式被丢弃。进一步的下游GRN速度可用于评估分支和非分支轨迹。</p>
<p>scMEGA从配对的scRNA-seq和scATAC-seq数据中沿着用户定义的轨迹推断GRN。对于后者，它利用FIGR的集成方法。它需要两个Seurat对象来存储基因表达和染色质可及性数据以及基因评分矩阵。一旦数据是多模态的，它就会通过使用Destiny的扩散图对用户选择的簇执行维数缩减。从获得的嵌入中，它使用ArchiR的s33方法计算感兴趣轨迹的伪时间分数，并相应地对细胞进行排名。接下来，scMEGA使用方法MOODs19和主题数据库JASPAR10将TF与峰值计数矩阵中的峰值相关联。然后，它根据获得的TF-峰值相互作用和chromVar21的峰值计数计算单细胞水平上的TF活性。为了考虑稀疏性，通过使用窗口平均值平滑它们的值，从轨迹中的有序细胞中创建伪时间点（TPs）。通过计算TF活性和TF对数归一化基因表达之间的皮尔逊相关性，过滤相关性大于0.3和错误发现率小于0.01，选择轨迹中的潜在相关TF。类似地，通过子集大多数可变基因的前90个百分位数来选择轨迹中的潜在相关基因。然后，它计算TP缩放对数归一化基因表达和TP缩放对数归一化峰值之间的Pearson相关性。最后，它通过到基因的TSS（250 kb向上或向下）的基因组距离、正相关和显著性来过滤获得的峰值基因链接。然后，scMEGA通过计算之前获得的相关TF和基因的TP缩放TF活性和TP缩放对数归一化基因表达之间的Pearson相关性来推断TF基因链接。最后，如果给定的TF在与给定基因相关的峰中有匹配的基序，则保留TF基因链接。</p>
<p>scMTNI是一种概率图形方法，它使用多任务学习从细胞谱系树和未配对的scRNA-seq和ATAC-seq数据中推断细胞类型特异性GRN。它首先从ATAC-seq数据中的集群特异性BAM文件中为每种细胞类型生成支架GRN。对于每种细胞类型，BAM文件被汇集以创建伪批量可访问性配置文件，并且TF基序分数是根据PWM与每个峰值的统一背景的对数比计算的，如使用CIS-BP4基序数据库的PIQ工具包53中定义的。然后，如果TSS位于峰值的上游或下游5 kb内，scMTNI将基序分配给每个ATAC-seq峰值，并将峰值链接到基因，从而导致TF峰值-基因相互作用。由于映射到一个TF的多个峰值可以分配给同一个基因，因此scMTNI选择所有可能峰值的最大基序分数作为TF基因的相互作用权重。最后，生成的二元支架GRN是通过保持基于母题分数的前20%的TF-基因相互作用来生成的。为了构建最终的细胞类型特异性GRN，scMTNI利用依赖网络，一类概率图形方法，将每个簇的归一化基因表达建模为依赖于一组TFs的随机变量。该模型由两个先验组成，在上一步中获得的细胞类型特异性支架GRN，以及作为细胞类型中TF-基因边缘概率的细胞谱系结构大概取决于其在前身细胞类型中的状态。有了这些，模型通过估计每个细胞类型的RNA-seq数据的后验分布来获得细胞类型特异性GRN权重。</p>
<p>SOMatic 利用自组织映射（SOM），一种无监督的深度学习嵌入技术，从不成对的scRNA-seq和scATAC-seq数据构建GRN。作为输入，SOMatic需要RSEM55定量后的RNA-seq数据，并将DNA测序和峰值数据分别映射为SAM和BED文件。SOMatic首先分别为RNA-seq和ATAC-seq训练SOM，然后为每个SOM识别元簇。对于两个组学之间的每个可能的元簇对，如果目标基因位于基因TSS的上或下游25 kb，SOMatic将峰值映射到目标基因。接下来，它通过使用主题数据库HOCOMOCO15使用FIMO28进行主题分析，将TF分配给每个峰值。为了只保留特定的TF-峰相互作用，计算配对元聚类峰中母题存在的单尾z分数测试，并删除非显着的。最后，SOMatic将所有重要的TFs链接到它们的下游靶基因跨成对的元聚类，获得最终的GRN。</p>
<p>Symphony是一种概率分层多视图混合方法，它将批量ATAC-seq数据反卷积到细胞类型配置文件中，并将这些数据与scRNA-seq数据集成，以不成对的方式推断细胞类型特异性GRN。它使用可访问性矩阵，量化为峰值高度，并使用对数转换的归一化基因计数矩阵作为输入。Symphony在具有三个组件的集成模型中同时拟合潜在参数。（1）表观遗传组件通过假设批量配置文件根据样本中集群的比例表示为加权和来模拟细胞类型特异性ATAC-seq配置文件。（2）GRN组件通过从ATAC-seq数据构建细胞类型支架GRN，假设调节链接依赖于基因组可访问性。首先，它使用带有未定义基序数据库的FIMO28将TF映射到峰值，然后将每个峰值分配给最接近的基因的TSS，生成TF-基因对。（3）表达组件假设对数转换的基因表达遵循多变量正态分布。对于每个TF-基因对，它定义了一种调节模式，这取决于它们在基因表达水平上的经验协方差的标志。通过使用2的路径长度在图中传播协方差，捕获间接调节事件，从而产生每个细胞类型的最终GRN，从而进一步完善了这个权重。</p>
<p>TimeReg根据配对的ATAC-seq和RNA-seq数据构建GRN并识别轨迹中每个时间点的关键调节因子。它首先根据以TXT文件形式提供的标准化表达和可访问性数据为每个时间点构建支架GRN，遵循与PECA38类似的框架。它将峰分配给每个基因TSS中未定义窗口中重叠的靶基因，并使用来自未定义数据库的主题的HOMER6在峰上分配TF。然后，它根据TF的表达水平、TF基序在可能的峰中的富集以及TF和基因之间的共表达为每个TF基因对定义跨调节分数。对于每个峰值基因对，TimeReg还根据TF基序结合分数、峰值基因相互作用的相互作用强度、峰值归一化可及性和先前计算的反式调节分数计算顺式调节分数。最后，它识别了在整个轨迹上对上调基因显示不同反式调节分数的驱动TF。</p>
<p>TRIPOD从Seurat对象中提供的配对scRNA-seq和scATAC-seq数据中推断出GRN。接下来，提取存储有关峰值可访问性、基序分数、基因表达等信息的多个数据对象以提交给TRIPOD。默认情况下，开放染色质区域用chromVAR21扫描JASPAR10数据库中的基序。为了考虑数据中的稀疏性，首先通过Seurat中实现的加权最近邻方法将细胞汇集到元细胞中。接下来，如果峰值位于TSS上游100 kb和下游100 kb的搜索窗口中，则它们与基因相关联。为了构建GRN，TRIPOD使用两种不同的方法推断监管三重奏。在第一种非参数方法中，元细胞以成对的方式匹配，同时固定TF表达或峰值可及性并丢弃低于用户定义阈值的匹配。在这里，调节三重奏是通过首先计算两个变量差异之间的Spearman相关性来确定的，其次应用回归模型来描述基因表达的差异，该模型描述了匹配对中峰值可及性差异与峰值可及性差异和平均TF表达差异的乘积的线性组合。根据固定参数，回归模型还可以描述TF表达的差异以及TF表达差异和平均峰值可及性差异的乘积。在第二种方法中，参数方法，在单个元细胞上使用多元线性回归模型来估计具有固定峰值可及性的TF表达的每次变化或具有固定TF表达的峰值可及性的每次变化的基因表达变化。对于这两种方法，最终的GRN都是通过按显著性过滤调节三元组来构建的。</p>
<p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/NSsAKBhFfktW29Z2DvHzaOMdYIAH07jic0qjTbKOBorZSXHqRuX9dAmdBxldUx2ftgibVt01WzqjXhTxsibc7Q6Tw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>[^1]: Badia-i-Mompel, P., Wessels, L., Müller-Dott, S. <em>et al.</em> Gene regulatory network inference in the era of single-cell multi-omics. <em>Nat Rev Genet</em> (2023). <a href="https://doi.org/10.1038/s41576-023-00618-5">https://doi.org/10.1038/s41576-023-00618-5</a></p>
]]></content>
      <tags>
        <tag>GRN</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo搭建blog</title>
    <url>/2023/10/07/hexo%E6%90%AD%E5%BB%BAblog/</url>
    <content><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol>
<li><p>node.js安装</p>
<p>版本必须&gt;10.13，安装地址：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a> ，一般装最新版应该没问题</p>
<blockquote>
<p>自带npm，如果后续npm装东西慢或者无效，可以从淘宝源装cnpm（用来替代npm）<br> <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install <span class="literal">-g</span> cnpm <span class="literal">--registry</span>=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><br> 记得检查下版本</p>
</blockquote>
 <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">node.js <span class="literal">-v</span></span><br><span class="line">npm <span class="literal">-v</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>hexo安装</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install <span class="literal">-g</span> hexo<span class="literal">-cli</span></span><br><span class="line">或</span><br><span class="line">cnpm install <span class="literal">-g</span> hexo<span class="literal">-cli</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="hexo搭建"><a href="#hexo搭建" class="headerlink" title="hexo搭建"></a>hexo搭建</h2><ol>
<li><p>初始化博客所在文件夹</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> 博客文件夹所在的文件夹</span><br><span class="line">hexo init 文件夹名</span><br><span class="line">或</span><br><span class="line"><span class="built_in">cd</span> 博客文件夹（空文件夹）</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure>
</li>
<li><p>hexo默认博客内容生成+开启本地服务器（默认4000）</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s <span class="comment">#开启本地服务器</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果hexo g没有生成index，可以cnpm install，再不行看看另一篇博文“hexo生成博客报错”</p>
</blockquote>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>多电脑用git branch进行博客维护</title>
    <url>/2023/10/07/%E5%A4%9A%E7%94%B5%E8%84%91%E7%94%A8git%20branch%E8%BF%9B%E8%A1%8C%E5%8D%9A%E5%AE%A2%E7%BB%B4%E6%8A%A4/</url>
    <content><![CDATA[<p>因为电脑有台式和笔记本，在不同的场景下进行博客记录的需求产生了，而且有些博文写一半也不好展示，幸好有git的多分支功能。</p>
<h4 id="对username-github-io仓库新建hexo分支，并克隆"><a href="#对username-github-io仓库新建hexo分支，并克隆" class="headerlink" title="对username.github.io仓库新建hexo分支，并克隆"></a>对username.github.io仓库新建hexo分支，并克隆</h4><p>在Github的username.github.io仓库上新建一个xxx分支，并切换到该分支，并在该仓库-&gt;Settings-&gt;Branches-&gt;Default branch中将默认分支设为xxx，save保存；然后将该仓库克隆到本地，进入该username.github.io文件目录。</p>
]]></content>
  </entry>
</search>
